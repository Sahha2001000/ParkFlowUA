from datetime import datetime, timedelta

from flask import Blueprint, request, jsonify
from sqlalchemy.exc import IntegrityError
from app.models import db, Booking, User, Car
from app.models.parking import Spot
from app.models.card import Card
from app.schemas.booking_schemas import booking_schema, bookings_schema
from app.utils.logger import logger

booking_bp = Blueprint("booking_bp", __name__, url_prefix="/api/bookings")


# 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
@booking_bp.route("/phone/<string:phone_number>", methods=["POST"])
def create_booking_by_phone(phone_number):
    data = request.json
    logger.info(f"[API] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: phone={phone_number}, data={data}")

    user = User.query.filter_by(phone_number=phone_number).first()
    if not user:
        logger.warning(f"[API] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {phone_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        return jsonify({"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

    car = Car.query.filter_by(id=data.get("car_id"), user_id=user.id).first()
    if not car:
        logger.warning(f"[API] –ê–≤—Ç–æ –∑ ID={data.get('car_id')} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
        return jsonify({"message": "–ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"}), 404

    spot = Spot.query.get(data.get("spot_id"))
    if not spot:
        return jsonify({"message": "–ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

    card = Card.query.filter_by(id=data.get("card_id"), user_id=user.id).first()
    if not card:
        logger.warning(f"[API] –ö–∞—Ä—Ç–∫–∞ ID={data.get('card_id')} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
        return jsonify({"message": "–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"}), 404

    try:
        duration_hours = float(data.get("duration_hours", 1))
        if duration_hours <= 0:
            raise ValueError()
    except Exception:
        return jsonify({"message": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å"}), 400

    total_price = round(spot.hourly_rate * duration_hours, 2)

    try:
        now = datetime.utcnow()
        occupied_from = now
        occupied_until = now + timedelta(hours=duration_hours)

        # üü° –æ–Ω–æ–≤–ª—é—î–º–æ spot (–ø–∞—Ä–∫–æ–º—ñ—Å—Ü–µ)
        spot.occupied_from = occupied_from
        spot.occupied_until = occupied_until
        spot.is_available = False

        booking = Booking(
            spot_id=spot.id,
            car_id=car.id,
            user_id=user.id,
            card_id=card.id,
            duration_hours=duration_hours,
            total_price=total_price,
            created_at=now,
            status='pending'
        )

        db.session.add(booking)
        db.session.commit()

        logger.success(f"[API] –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {booking}")

        # üîÅ –î–æ–¥–∞—î–º–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞–∫–æ–∂ occupied_from —Ç–∞ occupied_until
        response = booking_schema.dump(booking)
        response.update({
            "occupied_from": occupied_from.isoformat(),
            "occupied_until": occupied_until.isoformat()
        })

        return jsonify(response), 201

    except IntegrityError:
        db.session.rollback()
        logger.exception("[API] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
        return jsonify({"message": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"}), 400


# 2. –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω—é–≤–∞–Ω—å –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
@booking_bp.route("/phone/<string:phone_number>", methods=["GET"])
def get_bookings_by_phone(phone_number):
    logger.info(f"[API] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {phone_number}")

    user = User.query.filter_by(phone_number=phone_number).first()
    if not user:
        return jsonify({"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

    bookings = Booking.query.filter_by(user_id=user.id).all()
    return jsonify(bookings_schema.dump(bookings)), 200


# 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
@booking_bp.route("/<int:booking_id>", methods=["GET"])
def get_booking_status(booking_id):
    logger.info(f"[API] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ID={booking_id}")
    booking = Booking.query.get_or_404(booking_id)
    return jsonify({
        "id": booking.id,
        "spot_id": booking.spot_id,
        "car_id": booking.car_id,
        "user_id": booking.user_id,
        "card_id": booking.card_id,
        "status": booking.status,
        "created_at": booking.created_at,
        "paid_at": booking.paid_at,
        "duration_hours": booking.duration_hours,
        "total_price": booking.total_price,
    }), 200


# 4. –í–∏–¥–∞–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
@booking_bp.route("/<int:booking_id>", methods=["DELETE"])
def delete_booking(booking_id):
    booking = Booking.query.get_or_404(booking_id)
    db.session.delete(booking)
    db.session.commit()
    logger.success(f"[API] –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ID={booking_id} –≤–∏–¥–∞–ª–µ–Ω–æ")
    return jsonify({"message": f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ID {booking_id} –≤–∏–¥–∞–ª–µ–Ω–æ"}), 200
